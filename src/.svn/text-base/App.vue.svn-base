<template>
    <div class="main">
        <transition :name="'switch-' + getPageType">
            <!--<keep-alive include="index">-->
                <router-view class="router-view" @touchstart.prevent></router-view>
            <!--</keep-alive>-->
        </transition>
        <v-notification ref="notification"></v-notification>
        <v-footer v-if="this.$route.path === '/' || this.$route.path === '/myCenter' || (this.$route.path === '/shoppingCart' && !this.$route.query.from)" ref="footer"></v-footer>
    </div>
</template>

<script type="text/ecmascript-6">

    import router from './router';
    import notification from './components/notification/notification';
    import footer from './components/footer/Footer.vue';
    export default {
        name: 'app',
        data: function () {
            return {
                touch: false,
                move: false,
                startP: null,
                moveP: null,
                endP: null,
                type: '',
                pages: 0,
                replace: false,
                push: false,
            }
        },
        components: {
            'v-notification': notification,
            'v-footer': footer
        },
        created: function(){

        },
        computed: {
            setClass: function () {
                return 'router-view ' + this.type
            },
            getPageType: function () {
                return this.$store.state.type;
            }
        },
        watch: {
            '$route' (to, from) {
                document.title = to.name;
                if (this.$refs.notification.show === true) this.$refs.notification.show = false;
//                console.log(to)
                if (this.pages === 0) {
                    let appPages = this.findSession('appPages');
                    if (!appPages || (appPages && appPages[appPages.length - 1].path !== to.path)) {
                        this.pages = 1;
                        this.saveSession('appPages', [{path: to.path}])
                    } else {
                        this.pages = appPages.length;
                    }
                    return;
                }
                let appPages = this.findSession('appPages') || [];
                let len = appPages.length;

                for (let i = len - 2; i >= 0 && !this.push; i--) {
                    var item = appPages[i];
                    if (item.path === to.path) {
                        this.$store.commit('setPrev');

                        appPages.splice(i + 1);

                        this.saveSession('appPages', appPages);
                        this.pages = appPages.length;
                        return;
                    }
                }

                this.$store.commit('setNext');

                let page = {
                    path: to.path,
                    type: this.type,
                };

                if(this.replace){
                    appPages[appPages.length-1] = page;
                }else {
                    appPages.push(page);
                }

                this.saveSession('appPages', appPages);
                this.pages = appPages.length;

                this.replace = false;
                this.push = false;
            }
        },
        methods: {
            //setType: function (type) {
            //    this.type = type;
            //    const el = document.getElementsByClassName('ui-page');
            //    if (el[0]) {
            //        el[0].className = 'ui-page ' + type;
            //    }
            //},
            getBackViewIndex: function(name){
                let pages = this.findSession('appPages');
                let length = pages.length;
                for(let i = length-1; i >= 0; i--){
                    if(pages[i].path === name ){
                        return i-length+1;
                    }
                }
            },
            pushView: function (name, data) {
                this.push = true;
                this.$router.push({path: name, query: data});
            },
            backToView: function (name) {
                if(!name){
                    this.$router.go(-1);
                }else{
                    let i = this.getBackViewIndex(name);
                    if(i === undefined){
                        this.pushView(name);
                    }else{
                        this.$router.go(i);
                    }

                }
            },
            replaceView: function (name, data) {
                this.replace = true;
                this.$router.replace({path: name, query: data})
            }
        },
    }
</script>

<style lang="less">
    html, body{
        height: 100%;
        width: 100%;
        overflow: hidden;
    }
    *{
        font-size: 16px;
    }
    .ui-page{
        position: absolute;
        height: 100%;
        width: 100%;
        overflow: scroll;
        background: #FFFFFF;
        -webkit-overflow-scrolling: touch
    }
    .main {
        position: relative;
        width: 100%;
        height: 100%;
        /*text-align: center;*/
        color: #333;
    }
    /*.switch-enter-active {
        transition: all .3s ease-in-out;
    }
    .switch-leave-active {
        transition: all .3s ease-in-out;
    }
    .switch-enter.prev{
        transform: translate3D(-100%, 0, 0);
    }
    .switch-leave-active.prev {
        transform: translate3D(100%, 0, 0);
    }
    .switch-enter.next{
        transform: translate3D(100%, 0, 0);
    }
    .switch-leave-active.next {
        transform: translate3D(-100%, 0, 0);
    }*/

/**
* vue-router transition
*/
    .router-view {
        width: 100%;
        height: 100%;
        /*height: calc(~"100% - 0.98rem");*/
        overflow: auto;
        -webkit-overflow-scrolling: touch;
        animation-duration: 0.5s;
        animation-fill-mode: both;
        backface-visibility: hidden;
    }
    .switch-prev-enter-active,
    .switch-prev-leave-active,
    .switch-next-enter-active,
    .switch-next-leave-active {
        will-change: transform;
        height: 100%;
        position: absolute;
        left: 0;
    }
    .switch-prev-enter-active {
        animation-name: popInLeft;
    }
    .switch-prev-leave-active {
        animation-name: popOutRight;
    }
    .switch-next-enter-active {
        /*perspective: 1000;*/
        animation-name: popInRight;
    }
    .switch-next-leave-active {
        animation-name: popOutLeft;
    }
    @keyframes popInLeft {
        from {
            opacity: 0;
            transform: translate3d(-100%, 0, 0);
        }
        to {
            opacity: 1;
            transform: translate3d(0, 0, 0);
        }
    }
    @keyframes popOutLeft {
        from {
            opacity: 1;
        }
        to {
            opacity: 0;
            transform: translate3d(-100%, 0, 0);
        }
    }
    @keyframes popInRight {
        from {
            opacity: 0;
            transform: translate3d(100%, 0, 0);
        }
        to {
            opacity: 1;
            transform: translate3d(0, 0, 0);
        }
    }
    @keyframes popOutRight {
        from {
            opacity: 1;
        }
        to {
            opacity: 0;
            transform: translate3d(100%, 0, 0);
        }
    }

    .notification-p{
        padding: .1rem 0;
        text-align: left;
    }

</style>
